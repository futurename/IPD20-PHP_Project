{% extends "layouts/layout.html.twig" %}

{% block title %}
    Welcome to my blog
{% endblock title %}

{% block section %}


    <div class="mx-auto w-3/5">
        <h1 class="p-4 text-3xl font-bold">START A RESERVATION</h1>
        <ul class="p-4 font-bold text-2xl text-green-900">
            <li>Welcome, please select location and date</li>
        </ul>
        {% if errors %}
            <ul>
            </ul>
        {% endif %}


        <form class="text-lg p-4" method="post" action="/car_selection">
            <div>
                <div>
                    <p class="mb-2 font-bold">1. PICK-UP LOCATION (Postal Code, City)</p>
                    <input placeholder="X1X or city name" class="w-3/5 p-2 h-10 border-2 border-gray-500" type="text"
                           name="pickupLocation" id="pickupSearchText" list="pickupLocationList"
                           autocomplete="false"/>
                    <datalist id="pickupLocationList">
                    </datalist>
                    <input type="text" class="hidden" id="pickupStoreId" name="pickupStoreId"/>
                </div>

                <div class="mt-2">
                    <input type="checkbox" name="isDiffLocation"/>
                    <span class="font-bold">Return to a different location</span>
                </div>
                <div id="returnLocation" class="hidden">
                    <p class="my-2 font-bold text-blue-900">PICK-UP RETURN LOCATION (Postal Code, City)</p>
                    <input placeholder="X1X or city name" class="w-3/5 p-2 h-10 border-2 border-gray-500" type="text"
                           name="returnLocation" id="returnSearchText" list="returnLocationList"
                           autocomplete="false"/><br>
                    <datalist id="returnLocationList">
                    </datalist>
                    <input type="text" class="hidden" id="returnStoreId" name="returnStoreId"/>
                </div>
            </div>


            <div id="googleMap" class="my-5 w-3/4" style="height: 500px"></div>

            <script async defer
                    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTHaPcilifXM74SAWo-_yGmXDnEwGYR4Y&language=en&region-CA&callback=initMap">
            </script>
            <div class="mt-6">
                <div class="flex inline-block">
                    <span class="mb-2 font-bold w-5/12 ">2. PICK-UP TIME</span>
                    <span class="mb-2 font-bold pl-10">RENT DAYS</span>
                </div>

                <div >
                    <input class="w-1/5 font-bold text-center p-2 mr-5 h-10 border-2 border-gray-500" type="date"
                           name="pickupDate" id="pickupDate"/>
                    <input class="pickupTime font-bold w-1/6 text-center p-2 h-10 border-2 border-gray-500 mr-5"
                           value="09:00:00"
                           type="time"
                           list="pickupTimeList"
                           step="600" name="pickupTime" id="pickupTime">
                    <datalist id="pickupTimeList">
                        <option value="08:00"/>
                        <option value="09:00"/>
                        <option value="10:00"/>
                        <option value="11:00"/>
                        <option value="12:00"/>
                        <option value="13:00"/>
                        <option value="14:00"/>
                        <option value="15:00"/>
                        <option value="16:00"/>
                        <option value="17:00"/>
                        <option value="18:00"/>
                        <option value="19:00"/>
                        <option value="20:00"/>
                    </datalist>
                    <input class="w-1/6 text-center font-bold p-2 h-10 border-2 border-gray-500" type="number" min="1"
                           value="1"
                           id="rentDays"/>
                </div>
            </div>
            <div class="mt-4">
                <p class="mb-2 font-bold">3. RETURN TIME</p>
                <div class="flex">
                    <input class="returnDate font-bold w-1/5 text-center p-2 mr-5 h-10 border-2 border-gray-500"
                           type="date"
                           name="returnDate" id="returnDate"/>
                    <input class="returnTime font-bold w-1/6 text-center p-2 h-10 border-2 border-gray-500"
                           value="09:00:00"
                           type="time" step="600"
                           list="returnTimeList" name="returnTime" id="returnTime">
                    <datalist id="returnTimeList">
                        <option value="08:00"/>
                        <option value="09:00"/>
                        <option value="10:00"/>
                        <option value="11:00"/>
                        <option value="12:00"/>
                        <option value="13:00"/>
                        <option value="14:00"/>
                        <option value="15:00"/>
                        <option value="16:00"/>
                        <option value="17:00"/>
                        <option value="18:00"/>
                        <option value="19:00"/>
                        <option value="20:00"/>
                    </datalist>
                </div>
            </div>

            <div class="mt-6 text-right">
                <input type="submit" class="px-8 py-2 mt-8 rounded bg-green-700 text-white" value="CONTINUE">
            </div>
        </form>
    </div>



    <script>
        var curLocationElement = $("#pickupSearchText");
        var defaultLocation = {lat: 45.5017, lng: -73.5673};
        var map;
        var markers = [];

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        // Shows any markers currently in the array.
        function showAllMarkers() {
            setMapOnAll(map);
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearAllMarkers() {
            setMapOnAll(null);
        }

        // Deletes all markers in the array by removing references to them.
        function deleteAllMarkers() {
            clearAllMarkers();
            markers = [];
        }

        // Adds a marker to the map and push to the array.
        function addMarker(location, store) {
            var marker = new google.maps.Marker({
                position: location,
                map: map,
                icon: {
                    url: "../../resources/companyimages/enterprise_icon.jpg",
                    scaledSize: new google.maps.Size(45, 45),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(10, 10),
                    labelOrigin: {x: 23, y: 10},
                },
                title: store.storeName,
                animation: google.maps.Animation.DROP,
                label:{
                    text: store['carNum'].carNum + '\xa0\xa0\xa0\xa0\xa0\xa0\xa0' + store['avaCarNum'].carNum,
                    fontSize:"14px",
                    fontWeight:"bold",
                    color:"white"
                }
            });

            var storeInfo = formatStoreInfo(store);

            var infoWindow = new google.maps.InfoWindow({
                content: storeInfo
            })

            marker.addListener('mouseover', function () {
                infoWindow.open(map, marker);
            })
            marker.addListener('mouseout', function () {
                infoWindow.open(map, marker);
                setTimeout(function () {
                    infoWindow.close()
                }, 500);
            })

            marker.addListener('click', function () {
                if(store['avaCarNum'].carNum == 0){
                    alert('No avaliable cars in the store, would you select a different location?');
                }

                curLocationElement.val(`${store.storeName}  (${store.address} ${store.postCode})`);
                curLocationElement.next().next().val(store.id);

            })

            markers.push(marker);
        }

        function initMap() {
            map = new google.maps.Map(document.getElementById('googleMap'), {
                center: defaultLocation,
                zoom: 10,
                draggable: true
            });

            loadAdjacentStores(defaultLocation);
        }

        function newLocation(newLat, newLng) {
            map.setCenter({
                lat: newLat,
                lng: newLng
            });
        }

        google.maps.event.addDomListener(window, 'load', initMap);

        function formatStoreInfo(store) {
            return `<p class="font-bold text-base">${store.storeName}</p>
                    <p class="text-sm">${store.address}</p>
                    <p class="text-sm">${store.phone}</p>`;
        }

        function getTodayDate() {
            var today = new Date();
            return today.getFullYear() + "-" + ("0" + (today.getMonth() + 1)).slice(-2) + "-" + ("0" + today.getDate()).slice(-2);
        }

        function getNowTime() {
            var today = new Date();
            if (Math.ceil(today.getMinutes() / 10) * 10 >= 60) {
                return ("0" + (today.getHours() + 1)).slice(-2) + ":" + ("0" + Math.ceil(today.getMinutes() / 10) * 10 % 60).slice(-2);
            } else {
                return ("0" + today.getHours()).slice(-2) + ":" + ("0" + Math.ceil(today.getMinutes() / 10) * 10).slice(-2);
            }
        }

        function getReturnDate(days) {
            days = days > 0 ? days : 1;
            var today = new Date();
            var retDate = new Date(Number(today));
            retDate.setDate(today.getDate() + days);
            return retDate.getFullYear() + "-" + ("0" + (retDate.getMonth() + 1)).slice(-2) + "-" + ("0" + retDate.getDate()).slice(-2);
        }

        function searchCities(element, listElement) {
            var curSearchText = $(element).val();
            if (curSearchText.length >= 2) {
                var dataString = JSON.stringify({searchText: curSearchText})

                $.ajax({ // FIXME: escape special characters using urlencode
                    url: "/search/location",
                    type: "POST",
                    dataType: "json",
                    data: dataString,
                    error: function (jqxhr, status, errorThrown) {
                        alert("AJAX error: " + jqxhr.responseText);
                    }
                }).done(function (cityList) {
                    $(listElement).empty();
                    $.each(cityList, function (i, item) {
                        var option = new Option(item['name'] + " (" + item['postalCode'] + ")");
                        $(listElement).append(option);
                    });

                }).always(function () {

                });
            }
        }


        function loadAdjacentStores(yourLocation) {
            $.ajax({
                url: "/map/location/80",
                type: "POST",
                dataType: "json",
                data: JSON.stringify(yourLocation),
                error: function (jqxhr, status, errorThrown) {
                    alert("AJAX error: " + jqxhr.responseText);
                }
            }).done(function (stores) {

                deleteAllMarkers();

                for (var i = 0; i < stores.length; i++) {
                    var store = stores[i];
                    var location = {lat: parseFloat(store.latitude), lng: parseFloat(store.longitude)};

                    addMarker(location, store);
                }
            }).always(function () {

            })
        }

        function resetMapCenter(cityname) {
            $.ajax({ // FIXME: escape special characters using urlencode
                url: "/search/cityname",
                type: "POST",
                dataType: "json",
                data: JSON.stringify(cityname),
                error: function (jqxhr, status, errorThrown) {
                    alert("AJAX error: " + jqxhr.responseText);
                }
            }).done(function (cityCoordinates) {
                var yourLocation;
                if (cityCoordinates === null) {
                    yourLocation = defaultLocation;
                } else {
                    yourLocation = {lat: Number(cityCoordinates.lat), lng: Number(cityCoordinates.lng)}
                }

                newLocation(Number(cityCoordinates.lat), Number(cityCoordinates.lng));
                var marker = new google.maps.Marker({
                    position: yourLocation,
                    map: map,
                    icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png",
                        size: new google.maps.Size(32, 32),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(25, 25),
                        labelOrigin: {x: 22, y: -8}
                    },
                    label: {
                        color: 'red',
                        fontWeight: 'bold',
                        fontSize: '16px',
                        text: 'You are here'
                    },
                });

                loadAdjacentStores(yourLocation);

            }).always(function () {

            });
        }

        $(document).ready(function () {

            $('form input').keydown(function (e) {
                if (e.keyCode == 13) {
                    e.preventDefault();
                    return false;
                }
            });

            $("#pickupSearchText").on("change", function () {
                var input = $(this).val();
                resetMapCenter(input.substr(0, input.length - 6));
            })

            $("#returnSearchText").on("change", function () {
                var input = $(this).val();
                resetMapCenter(input.substr(0, input.length - 6));
            })


            $("#pickupSearchText").on('keypress',function (e) {
                searchCities(this, "#pickupLocationList");
            });

            $("#returnSearchText").on("keypress", function () {
                searchCities(this, "#returnLocationList");
            });

            $("#pickupDate").val(getTodayDate);
            $("#pickupTime").val(getNowTime);
            $("#returnDate").val(getReturnDate(Number($("#rentDays").val())));
            $("#returnTime").val(getNowTime);

            $("#returnDate").on("change", function () {
                var retDate = $(this).val();
                var picDate = $("#pickupDate").val();
                if (retDate <= picDate) {
                    alert("Return date must be at least one day after pick-up date!");
                }
            })

            $("#rentDays").on("change", function () {
                var days = $(this).val() > 0 ? $("#rentDays").val() : 1;
                $(this).val(days);
                $("#returnDate").val(getReturnDate(Number(days)));
            })

            $("input[name=isDiffLocation]").on("click", function () {
                if ($(this).prop("checked")) {
                    curLocationElement = $("#returnSearchText");
                    $("#returnLocation").show();
                } else {
                    curLocationElement = $("#pickupSearchText");
                    $("#returnLocation").hide();
                }
            })

            $("#pickupSearchText").on('focus', function () {
                curLocationElement = $("#pickupSearchText");
            })

            $("#returnSearchText").on("focus", function () {
                curLocationElement = $("#returnSearchText");
            })


        })
        $(document).ajaxError(function (event, jqxhr, settings, thrownError) {
            console.log("Ajax error occured on " + settings.url);
            alert("Ajax error occurred");
        });


    </script>




{% endblock section %}